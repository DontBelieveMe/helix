function sum(%0:ptr, %1:i32): i32 {
.0:
        stack_alloc [ptr x 1], %2:ptr         # param array
        store %0:ptr, %2:ptr                  # 
        stack_alloc [i32 x 1], %3:ptr         # param array_length
        store %1:i32, %3:ptr                  #
        stack_alloc [i32 x 1], %4:ptr         # sum = 0
        store 0:i32, %4:ptr                   #
        stack_alloc [i32 x 1], %5:ptr         # i = 0
        store 0:i32, %5:ptr                   #
        br .1                                 # goto .1
.1:                                           #
        load %5:ptr, %6:i32                   # %6 = i
        load %3:ptr, %7:i32                   # %7 = array_length
        icmp_lt %6:i32, %7:i32, %8:i32        # cond = i < array_length
        cbr .2, .3, %8:i32                    # if cond { goto .2 } else { goto .3 }
.2:                                           #
        load %4:ptr, %9:i32                   # %9  = sum
        load %2:ptr, %10:ptr                  # %10 = array
        load %5:ptr, %11:i32                  # %11 = i
        lea [i32], %10:ptr, %11:i32, %12:ptr  # %12 = array + i
        load %12:ptr, %13:i32                 # %13 = *(%12)
        iadd %9:i32, %13:i32, %14:i32         # %14 = sum + array[i]
        store %14:i32, %4:ptr                 # sum = %14
        load %5:ptr, %15:i32                  # %15 = i
        iadd %15:i32, 1:i32, %16:i32          # %16 = i + 1
        store %16:i32, %5:ptr                 # i   = %16
        br .1                                 # goto .1
.3:                                           #
        load %4:ptr, %17:i32                  # %17 = sum
        ret %17:i32                           # return sum
}