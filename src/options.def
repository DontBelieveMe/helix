#ifndef ARGUMENT
	#define ARGUMENT(type, default, varName, cliName, desc)
#endif

#ifndef ARGUMENT_LIST
	#define ARGUMENT_LIST(type, varName, cliName, desc)
#endif

#ifndef ARGUMENTS_POSITIONAL
	#define ARGUMENTS_POSITIONAL(type, varName, desc)
#endif

ARGUMENT(bool,        false, EmitIR1,                             "emit-ir-1",             "Print IR as produced by the frontend before running any passes"                  )
ARGUMENT(bool,        false, DisableColours,                      "no-colours",            "Disable the use of ASCII colour codes in std[out|err] output"                    )
ARGUMENT(bool,        false, DebugAnnotateIR,                     "annotate-ir",           "Toggles the display of debug comments (if specified) alongside IR"               )
ARGUMENT(bool,        true,  DisableLogging,                      "no-logging",            "Disable the output of debug logs"                                                )
ARGUMENT(std::string, "",    EmitIRPostPass,                      "emit-ir-post",          "Emit IR after the given pass, but continue processing as normal"                 )
ARGUMENT(std::string, "",    EmitIRPrePass,                       "emit-ir-pre",           "Emit IR before the given pass, but continue processing as normal"                )
ARGUMENT(std::string, "",    DumpCFGPost   ,                      "dump-cfg-post",         "Dump the module CFG to a graphiz compatible dot file after the given pass"       )
ARGUMENT(std::string, "",    OutputFile,                          "o",                     "Output file (for assembly if -S is given, else the executable)"                  )
ARGUMENT(bool,        false, OnlyDumpAssembly,                    "S",                     "Compile to assembly, dump that to the output file and exit (don't assemble/link)")
ARGUMENT(bool,        false, EnableExperimentalRegisterAllocator, "experimental-regalloc", "Enable the register allocator"                                                   )
ARGUMENT(bool,        false, CompileOnly,                         "c",                     "Don't link, only compile input source to an object file"                         )
ARGUMENT(std::string, "",    DumpBase,                            "dumpbase",              "Base directory in which to dump intermediate output files"                       )
ARGUMENT(bool,        false, SaveTemps,                           "save-temps",            "Save temporary files & don't delete them at the end of compilation"              )
ARGUMENT(std::string, "",    StopAfterPass,                       "stop-after-pass",       "Stop after the given pass has finished running"                                  )
ARGUMENT(std::string, "",    TestTracePass,                       "test-trace",            "The specified pass should output debug/internal information. For testing"        )
ARGUMENT(bool,        false, NoStdLib,                            "nostdlib",              "Don't link to the standard library"                                              );

ARGUMENT_LIST(std::string, EnabledLog, "log", "Print all logs for the given channel to stdout")
ARGUMENT_LIST(std::string, PP_Defines, "D", "Define <macro> to <value> (or 1 if <value> omitted)")

ARGUMENTS_POSITIONAL(std::string, SourceFile, "file...");

#undef ARGUMENT
#undef ARGUMENT_LIST
#undef ARGUMENTS_POSITIONAL