<Test>
	<Flags>--emit-ir-post=retcomb -c</Flags>

	<TestFlags>
		<TestFlag name="regex" value="false"></TestFlag>
	</TestFlags>

	<ExpectedOutput>
function a(%0:i32): i32 {
.0:
	stack_alloc [i32 x 1], %1:ptr
	stack_alloc [i32 x 1], %2:ptr
	stack_alloc [i32 x 1], %3:ptr
	store %0:i32, %3:ptr
	load %3:ptr, %4:i32
	icmp_gt %4:i32, 3:i32, %5:i32
	cbr .1, .2, %5:i32
.1:
	load %3:ptr, %6:i32
	icmp_gte %6:i32, 5:i32, %7:i32
	cbr .3, .4, %7:i32
.3:
	store 30:i32, %1:ptr
	br .5
.4:
	store 10:i32, %1:ptr
	br .5
.2:
	store 5:i32, %2:ptr
	br .6
.6:
	load %2:ptr, %8:i32
	icmp_gt %8:i32, 0:i32, %9:i32
	cbr .7, .8, %9:i32
.7:
	load %2:ptr, %10:i32
	isub %10:i32, 1:i32, %11:i32
	store %11:i32, %2:ptr
	load %2:ptr, %12:i32
	icmp_eq %12:i32, 2:i32, %13:i32
	cbr .9, .10, %13:i32
.9:
	store 50:i32, %1:ptr
	br .5
.10:
	br .6
.8:
	load %2:ptr, %14:i32
	store %14:i32, %1:ptr
	br .5
.5:
	load %1:ptr, %15:i32
	ret %15:i32
}
function test(): i32 {
.0:
	stack_alloc [i32 x 1], %0:ptr
	store 10:i32, %0:ptr
	br .1
.1:
	load %0:ptr, %1:i32
	ret %1:i32
}
	</ExpectedOutput>
</Test>