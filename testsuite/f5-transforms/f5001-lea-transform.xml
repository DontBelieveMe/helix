<Test>
	<Flags>--emit-ir-post=genlower -c</Flags>

	<TestFlags>
		<TestFlag name="regex" value="false"></TestFlag>
	</TestFlags>

	<ExpectedOutput>
function first_element(%0:ptr): i32 {
.0:
	stack_alloc [i32 x 1], %1:ptr
	stack_alloc [ptr x 1], %2:ptr
	store %0:ptr, %2:ptr
	load %2:ptr, %3:ptr
	ptrtoint [ptr -> i32], %3:ptr, %4:i32
	imul 0:i32, 4:i32, %5:i32
	iadd %4:i32, %5:i32, %6:i32
	inttoptr [i32 -> ptr], %6:i32, %7:ptr
	load %7:ptr, %8:i32
	store %8:i32, %1:ptr
	br .1
.1:
	load %1:ptr, %9:i32
	ret %9:i32
}
function nth_element(%0:ptr, %1:i32): i32 {
.0:
	stack_alloc [i32 x 1], %2:ptr
	stack_alloc [ptr x 1], %3:ptr
	store %0:ptr, %3:ptr
	stack_alloc [i32 x 1], %4:ptr
	store %1:i32, %4:ptr
	load %3:ptr, %5:ptr
	load %4:ptr, %6:i32
	ptrtoint [ptr -> i32], %5:ptr, %7:i32
	imul %6:i32, 4:i32, %8:i32
	iadd %7:i32, %8:i32, %9:i32
	inttoptr [i32 -> ptr], %9:i32, %10:ptr
	load %10:ptr, %11:i32
	store %11:i32, %2:ptr
	br .1
.1:
	load %2:ptr, %12:i32
	ret %12:i32
}
	</ExpectedOutput>
</Test>