<Test>
	<Flags>--emit-ir-1</Flags>

	<TestFlags>
		<TestFlag name="regex" value="false"></TestFlag>
	</TestFlags>

	<ExecutableExpectedExitCode>8</ExecutableExpectedExitCode>

	<ExpectedOutput>
function main(): i32 {
.0:
	stack_alloc [i32 x 1], %0:ptr
	store 10:i32, %0:ptr
	stack_alloc [i32 x 1], %1:ptr
	stack_alloc [i32 x 1], %2:ptr
	store 0:i32, %2:ptr
	br .1
.1:
	load %0:ptr, %3:i32
	icmp_gt %3:i32, 0:i32, %4:i32
	cbr .2, .3, %4:i32
.2:
	store 10:i32, %1:ptr
	br .4
.4:
	load %1:ptr, %5:i32
	icmp_gt %5:i32, 0:i32, %6:i32
	cbr .5, .6, %6:i32
.5:
	load %1:ptr, %7:i32
	icmp_lt %7:i32, 5:i32, %8:i32
	cbr .7, .8, %8:i32
.7:
	store 0:i32, %1:ptr
	load %2:ptr, %9:i32
	iadd %9:i32, 1:i32, %10:i32
	store %10:i32, %2:ptr
	br .4
.8:
	load %1:ptr, %11:i32
	isub %11:i32, 1:i32, %12:i32
	store %12:i32, %1:ptr
	br .4
.6:
	load %0:ptr, %13:i32
	icmp_lt %13:i32, 5:i32, %14:i32
	cbr .9, .10, %14:i32
.9:
	store 0:i32, %0:ptr
	load %2:ptr, %15:i32
	iadd %15:i32, 1:i32, %16:i32
	store %16:i32, %2:ptr
	br .1
.10:
	load %0:ptr, %17:i32
	isub %17:i32, 1:i32, %18:i32
	store %18:i32, %0:ptr
	br .1
.3:
	load %2:ptr, %19:i32
	ret %19:i32
}
	</ExpectedOutput>
</Test>