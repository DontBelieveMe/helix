<Test>
	<Flags>--emit-ir-1 -c</Flags>

	<TestFlags>
		<TestFlag name="regex" value="false"></TestFlag>
	</TestFlags>

	<ExpectedOutput>
function add(): void {
.0:
	stack_alloc [i32 x 1], %0:ptr
	store 10:i32, %0:ptr
	load %0:ptr, %1:i32
	iadd %1:i32, 2:i32, %2:i32
	store %2:i32, %0:ptr
	ret
}
function mul(): void {
.0:
	stack_alloc [i32 x 1], %0:ptr
	store 10:i32, %0:ptr
	load %0:ptr, %1:i32
	imul %1:i32, 2:i32, %2:i32
	store %2:i32, %0:ptr
	ret
}
function div(): void {
.0:
	stack_alloc [i32 x 1], %0:ptr
	store 10:i32, %0:ptr
	load %0:ptr, %1:i32
	isdiv %1:i32, 2:i32, %2:i32
	store %2:i32, %0:ptr
	ret
}
function sub(): void {
.0:
	stack_alloc [i32 x 1], %0:ptr
	store 10:i32, %0:ptr
	load %0:ptr, %1:i32
	isub %1:i32, 2:i32, %2:i32
	store %2:i32, %0:ptr
	ret
}
function rem(): void {
.0:
	stack_alloc [i32 x 1], %0:ptr
	store 6:i32, %0:ptr
	load %0:ptr, %1:i32
	isrem %1:i32, 4:i32, %2:i32
	store %2:i32, %0:ptr
	ret
}
function and(): void {
.0:
	stack_alloc [i32 x 1], %0:ptr
	store 4:i32, %0:ptr
	load %0:ptr, %1:i32
	and %1:i32, 6:i32, %2:i32
	store %2:i32, %0:ptr
	ret
}
function or(): void {
.0:
	stack_alloc [i32 x 1], %0:ptr
	store 12:i32, %0:ptr
	load %0:ptr, %1:i32
	or %1:i32, 3:i32, %2:i32
	store %2:i32, %0:ptr
	ret
}
function xor(): void {
.0:
	stack_alloc [i32 x 1], %0:ptr
	store 4:i32, %0:ptr
	load %0:ptr, %1:i32
	xor %1:i32, 3:i32, %2:i32
	store %2:i32, %0:ptr
	ret
}
	</ExpectedOutput>
</Test>